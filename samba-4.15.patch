--- openchange-openchange-2.3-VULCAN/libmapi/IProfAdmin.c~	2015-05-16 17:22:04.000000000 +0200
+++ openchange-openchange-2.3-VULCAN/libmapi/IProfAdmin.c	2021-11-16 21:59:10.069774286 +0100
@@ -753,7 +753,7 @@
 _PUBLIC_ enum MAPISTATUS LoadProfile(struct mapi_context *mapi_ctx, 
 				     struct mapi_profile *profile)
 {
-	enum credentials_use_kerberos use_krb = CRED_AUTO_USE_KERBEROS;
+	enum credentials_use_kerberos use_krb = CRED_USE_KERBEROS_DESIRED;
 
 	/* Sanity checks */
 	OPENCHANGE_RETVAL_IF(!mapi_ctx, MAPI_E_NOT_INITIALIZED, NULL);
@@ -777,9 +777,9 @@
 	 * another API in the profile */
 	if (profile->kerberos) {
 		if (!strncmp(profile->kerberos, "yes", 3)) {
-			use_krb = CRED_MUST_USE_KERBEROS;
+			use_krb = CRED_USE_KERBEROS_REQUIRED;
 		} else {
-			use_krb = CRED_DONT_USE_KERBEROS;
+			use_krb = CRED_USE_KERBEROS_DISABLED;
 		}
 	}
 	/* additionally, don't set the username in the ccache if kerberos
@@ -787,14 +787,14 @@
 	 * credentials.  cli_credentials_guess probably gets the right
 	 * thing anyway in the situations where kerberos is in use */
 	if (profile->username && *(profile->username)
-	    && use_krb != CRED_MUST_USE_KERBEROS) {
+	    && use_krb != CRED_USE_KERBEROS_REQUIRED) {
 		cli_credentials_set_username(profile->credentials, profile->username, CRED_SPECIFIED);
 	}
 	if (profile->password && *(profile->password)) {
 		cli_credentials_set_password(profile->credentials, profile->password, CRED_SPECIFIED);
 	}
-	if (use_krb != CRED_AUTO_USE_KERBEROS) {
-		cli_credentials_set_kerberos_state(profile->credentials, use_krb);
+	if (use_krb != CRED_USE_KERBEROS_DESIRED) {
+		cli_credentials_set_kerberos_state(profile->credentials, use_krb, CRED_SPECIFIED);
 	}
 
 	return MAPI_E_SUCCESS;
--- openchange-openchange-2.3-VULCAN/ndr_mapi.c.orig	2022-02-19 07:21:05.221687320 +0100
+++ openchange-openchange-2.3-VULCAN/ndr_mapi.c	2022-02-19 07:21:12.288315703 +0100
@@ -1220,6 +1220,7 @@ _PUBLIC_ enum ndr_err_code ndr_pull_EcDo
 	uint32_t	cntr_rgwClientVersion_0;
 	uint32_t	cntr_rgwServerVersion_0;
 	uint32_t	cntr_rgwBestVersion_0;
+	uint32_t        arrsize, arrlen;
 	TALLOC_CTX	*_mem_save_handle_0;
 	TALLOC_CTX	*_mem_save_pcmsPollsMax_0;
 	TALLOC_CTX	*_mem_save_pcRetry_0;
@@ -1239,11 +1240,13 @@ _PUBLIC_ enum ndr_err_code ndr_pull_EcDo
 
 		NDR_CHECK(ndr_pull_array_size(ndr, &r->in.szUserDN));
 		NDR_CHECK(ndr_pull_array_length(ndr, &r->in.szUserDN));
-		if (ndr_get_array_length(ndr, &r->in.szUserDN) > ndr_get_array_size(ndr, &r->in.szUserDN)) {
-			return ndr_pull_error(ndr, NDR_ERR_ARRAY_SIZE, "Bad array size %u should exceed array length %u", ndr_get_array_size(ndr, &r->in.szUserDN), ndr_get_array_length(ndr, &r->in.szUserDN));
+		NDR_CHECK(ndr_get_array_length(ndr, &r->in.szUserDN, &arrlen));
+		NDR_CHECK(ndr_get_array_size(ndr, &r->in.szUserDN, &arrsize));
+		if (arrlen > arrsize) {
+			return ndr_pull_error(ndr, NDR_ERR_ARRAY_SIZE, "Bad array size %u should exceed array length %u", arrsize, arrlen);
 		}
-		NDR_CHECK(ndr_check_string_terminator(ndr, ndr_get_array_length(ndr, &r->in.szUserDN), sizeof(uint8_t)));
-		NDR_CHECK(ndr_pull_charset(ndr, NDR_SCALARS, &r->in.szUserDN, ndr_get_array_length(ndr, &r->in.szUserDN), sizeof(uint8_t), CH_DOS));
+		NDR_CHECK(ndr_check_string_terminator(ndr, arrlen, sizeof(uint8_t)));
+		NDR_CHECK(ndr_pull_charset(ndr, NDR_SCALARS, &r->in.szUserDN, arrlen, sizeof(uint8_t), CH_DOS));
 		NDR_CHECK(ndr_pull_uint32(ndr, NDR_SCALARS, &r->in.ulFlags));
 		NDR_CHECK(ndr_pull_uint32(ndr, NDR_SCALARS, &r->in.ulConMod));
 		NDR_CHECK(ndr_pull_uint32(ndr, NDR_SCALARS, &r->in.cbLimit));
@@ -1366,11 +1369,13 @@ _PUBLIC_ enum ndr_err_code ndr_pull_EcDo
 			NDR_PULL_SET_MEM_CTX(ndr, *r->out.szDNPrefix, 0);
 			NDR_CHECK(ndr_pull_array_size(ndr, r->out.szDNPrefix));
 			NDR_CHECK(ndr_pull_array_length(ndr, r->out.szDNPrefix));
-			if (ndr_get_array_length(ndr, r->out.szDNPrefix) > ndr_get_array_size(ndr, r->out.szDNPrefix)) {
-				return ndr_pull_error(ndr, NDR_ERR_ARRAY_SIZE, "Bad array size %u should exceed array length %u", ndr_get_array_size(ndr, r->out.szDNPrefix), ndr_get_array_length(ndr, r->out.szDNPrefix));
+			NDR_CHECK(ndr_get_array_length(ndr, &r->out.szDNPrefix, &arrlen));
+			NDR_CHECK(ndr_get_array_size(ndr, &r->out.szDNPrefix, &arrsize));
+			if (arrlen > arrsize) {
+				return ndr_pull_error(ndr, NDR_ERR_ARRAY_SIZE, "Bad array size %u should exceed array length %u", arrsize, arrlen);
 			}
-			NDR_CHECK(ndr_check_string_terminator(ndr, ndr_get_array_length(ndr, r->out.szDNPrefix), sizeof(uint8_t)));
-			NDR_CHECK(ndr_pull_charset(ndr, NDR_SCALARS, r->out.szDNPrefix, ndr_get_array_length(ndr, r->out.szDNPrefix), sizeof(uint8_t), CH_DOS));
+			NDR_CHECK(ndr_check_string_terminator(ndr, arrlen, sizeof(uint8_t)));
+			NDR_CHECK(ndr_pull_charset(ndr, NDR_SCALARS, r->out.szDNPrefix, arrlen, sizeof(uint8_t), CH_DOS));
 			NDR_PULL_SET_MEM_CTX(ndr, _mem_save_szDNPrefix_1, 0);
 		}
 		NDR_PULL_SET_MEM_CTX(ndr, _mem_save_szDNPrefix_0, LIBNDR_FLAG_REF_ALLOC);
@@ -1391,11 +1396,13 @@ _PUBLIC_ enum ndr_err_code ndr_pull_EcDo
 			NDR_PULL_SET_MEM_CTX(ndr, *r->out.szDisplayName, 0);
 			NDR_CHECK(ndr_pull_array_size(ndr, r->out.szDisplayName));
 			NDR_CHECK(ndr_pull_array_length(ndr, r->out.szDisplayName));
-			if (ndr_get_array_length(ndr, r->out.szDisplayName) > ndr_get_array_size(ndr, r->out.szDisplayName)) {
-				return ndr_pull_error(ndr, NDR_ERR_ARRAY_SIZE, "Bad array size %u should exceed array length %u", ndr_get_array_size(ndr, r->out.szDisplayName), ndr_get_array_length(ndr, r->out.szDisplayName));
+			NDR_CHECK(ndr_get_array_length(ndr, &r->out.szDisplayName, &arrlen));
+			NDR_CHECK(ndr_get_array_size(ndr, &r->out.szDisplayName, &arrsize));
+			if (arrlen > arrsize) {
+				return ndr_pull_error(ndr, NDR_ERR_ARRAY_SIZE, "Bad array size %u should exceed array length %u", arrsize, arrlen);
 			}
-			NDR_CHECK(ndr_check_string_terminator(ndr, ndr_get_array_length(ndr, r->out.szDisplayName), sizeof(uint8_t)));
-			NDR_CHECK(ndr_pull_charset(ndr, NDR_SCALARS, r->out.szDisplayName, ndr_get_array_length(ndr, r->out.szDisplayName), sizeof(uint8_t), CH_DOS));
+			NDR_CHECK(ndr_check_string_terminator(ndr, arrlen, sizeof(uint8_t)));
+			NDR_CHECK(ndr_pull_charset(ndr, NDR_SCALARS, r->out.szDisplayName, arrlen, sizeof(uint8_t), CH_DOS));
 			NDR_PULL_SET_MEM_CTX(ndr, _mem_save_szDisplayName_1, 0);
 		}
 		NDR_PULL_SET_MEM_CTX(ndr, _mem_save_szDisplayName_0, LIBNDR_FLAG_REF_ALLOC);
@@ -1415,14 +1422,16 @@ _PUBLIC_ enum ndr_err_code ndr_pull_EcDo
 		NDR_PULL_SET_MEM_CTX(ndr, _mem_save_pulTimeStamp_0, LIBNDR_FLAG_REF_ALLOC);
 		NDR_CHECK(ndr_pull_array_size(ndr, &r->out.rgbAuxOut));
 		NDR_CHECK(ndr_pull_array_length(ndr, &r->out.rgbAuxOut));
-		if (ndr_get_array_length(ndr, &r->out.rgbAuxOut) > ndr_get_array_size(ndr, &r->out.rgbAuxOut)) {
-			return ndr_pull_error(ndr, NDR_ERR_ARRAY_SIZE, "Bad array size %u should exceed array length %u", ndr_get_array_size(ndr, &r->out.rgbAuxOut), ndr_get_array_length(ndr, &r->out.rgbAuxOut));
+		NDR_CHECK(ndr_get_array_length(ndr, &r->out.rgbAuxOut, &arrlen));
+		NDR_CHECK(ndr_get_array_size(ndr, &r->out.rgbAuxOut, &arrsize));
+		if (arrlen > arrsize) {
+			return ndr_pull_error(ndr, NDR_ERR_ARRAY_SIZE, "Bad array size %u should exceed array length %u", arrsize, arrlen);
 		}
 		if (ndr->flags & LIBNDR_FLAG_REF_ALLOC) {
-			NDR_PULL_ALLOC_N(ndr, r->out.rgbAuxOut, ndr_get_array_size(ndr, &r->out.rgbAuxOut));
+			NDR_PULL_ALLOC_N(ndr, r->out.rgbAuxOut, arrsize);
 		}
 		/* Only try to pull rgbAuxOut if the fake array size is > 0 */
-		if (ndr_get_array_size(ndr, &r->out.rgbAuxOut)) {
+		if (arrsize) {
 			_mem_save_rgbAuxOut_1 = NDR_PULL_GET_MEM_CTX(ndr);
 			NDR_PULL_SET_MEM_CTX(ndr, r->out.rgbAuxOut, 0);
 			NDR_CHECK(ndr_pull_mapi2k7_AuxInfo(ndr, NDR_SCALARS, r->out.rgbAuxOut));
